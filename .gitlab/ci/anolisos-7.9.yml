anolisos-7.9:env:
  stage: env
  image: registry.cn-qingdao.aliyuncs.com/xuxiaoweicomcn/debian:curl-jq
  variables:
    QEMU_ID: $ANOLISOS_7_9_QEMU_ID
    SNAPSHOT: $ANOLISOS_7_9_SNAPSHOT
  before_script:
    - echo $PVE_ADDRESS
    - echo $ANOLISOS_7_9_QEMU_ID
    - echo $QEMU_ID
    - echo $ANOLISOS_7_9_SNAPSHOT
    - echo $SNAPSHOT
  script:
    # 获取凭证
    - |
      response=$(curl -k -s --request POST --url "$PVE_ADDRESS/api2/extjs/access/ticket" --header 'Content-Type: application/x-www-form-urlencoded' --data-urlencode "username=$PVE_USERNAME" --data-urlencode "password=$PVE_PASSWORD" --data-urlencode 'realm=pam' --data-urlencode 'new-format=1')
    - echo $response | jq -r '.success'
    # 解析凭证
    - token=$(echo $response | jq -r '.data.CSRFPreventionToken')
    - ticket=$(echo $response | jq -r '.data.ticket')
    # 还原服务器快照
    - response=$(curl -k -s --request POST --url "$PVE_ADDRESS/api2/extjs/nodes/pve/qemu/$QEMU_ID/snapshot/$SNAPSHOT/rollback" --header "Cookie:PVEAuthCookie=$ticket" --header "CSRFPreventionToken:$token")
    - echo $response | jq -r '.success'
    # 休眠一段时间，等待服务器还原快照
    - sleep 30
    # 开机
    - response=$(curl -k -s --request POST --url "$PVE_ADDRESS/api2/extjs/nodes/pve/qemu/$QEMU_ID/status/start" --header "Cookie:PVEAuthCookie=$ticket" --header "CSRFPreventionToken:$token")
    - echo $response | jq -r '.success'
    - |
      while true; do
        # 查看状态
        response=$(curl -k --request GET --url "$PVE_ADDRESS/api2/json/nodes/pve/qemu/$QEMU_ID/status/current" --header "Cookie:PVEAuthCookie=$ticket" --header "CSRFPreventionToken:$token")
        status=$(echo "$response" | jq -r '.data.status')
        if [ "$status" = "running" ]; then
          echo "服务器已运行";
          break
        else
          echo '等待服务器运行';
          sleep 1;
        fi
      done
    - echo '等待一段时间，待服务器完全启动'
    - sleep 30
  timeout: 120s
  rules:
    - changes:
        paths:
          - .gitlab/ci/*.yml
          - .gitlab-ci.yml
          - k8s.sh
          - tmp.sh
  tags:
    - g150s-docker

anolisos-7.9:install:
  stage: install
  needs:
    - anolisos-7.9:env
  hooks:
    pre_get_sources_script:
      - yum install -y git
      - git config --global http.sslVerify false
  before_script:
    - cat /etc/os-release
    - ip addr | grep 'inet '
  script:
    - chmod +x tmp.sh
    - ./tmp.sh swap-off
    - free -h
    - used_swap=$(free -m | grep Swap | awk '{print $3}')
    - |
      if [ $used_swap -eq 0 ]; then
        echo "交换空间已关闭";
      else
        echo "交换空间未关闭";
        exit 1;
      fi
    - ./tmp.sh firewalld-stop
    - active_status=$(systemctl is-active firewalld || true)
    - echo $active_status
    - |
      if [[ $active_status == "active" ]]; then
        echo '防火墙未关闭';
        exit 1;
      else
        echo '防火墙未开启'
      fi
    - enabled_status=$(systemctl is-enabled firewalld || true)
    - echo $enabled_status
    - |
      if [[ $enabled_status == "enabled" ]]; then
        echo '防火墙开机自启未关闭';
        exit 1;
      else
        echo '防火墙开机自启未开启'
      fi
    - ./tmp.sh selinux-disabled
    - sestatus=$(getenforce)
    - |
      if [[ $sestatus == "Enforcing" ]]; then
        echo 'SELINUX 未关闭';
        exit 1;
      else
        echo 'SELINUX 未开启'
      fi
    - ./tmp.sh bash-completion
    - ./tmp.sh docker-repo containerd-install
    - ./tmp.sh docker-repo containerd-config
    - |
      if grep -q "SystemdCgroup = true" "/etc/containerd/config.toml"; then
          echo "配置了 containerd SystemdCgroup = true";
      else
          echo "未配置 containerd SystemdCgroup = true";
          exit 1;
      fi
    - |
      if grep -q "registry.k8s.io/pause" "/etc/containerd/config.toml"; then
          echo "未配置 containerd registry.k8s.io/pause 镜像";
          exit 1;
      else
          echo "配置了 containerd registry.k8s.io/pause 镜像";
      fi
    - ./tmp.sh docker-repo docker-install
    - ./tmp.sh kubernetes-repo kubernetes-install
    - ./tmp.sh kubernetes-repo kubernetes-images-pull
    - ctr -n=k8s.io i ls | awk '{print $1}' | grep -v 'sha256'
    - output=$(ctr -n=k8s.io i ls | awk '{print $1}' | grep -v 'sha256')
    - |
      if echo "$output" | grep -q "kube-apiserver"; then
          echo "找到名称带有 kube-apiserver 的镜像"
      else
          echo "未找到名称带有 kube-apiserver 的镜像"
      fi
  rules:
    - changes:
        paths:
          - .gitlab/ci/*.yml
          - .gitlab-ci.yml
          - k8s.sh
          - tmp.sh
  tags:
    - GitLab-CICD-AnolisOS-7.9
